@use "sass:map";
@forward "var";
@forward "function";
@use "./function" as *;
@use "./var" as *;
@use "./config" as *;

$b: null !default;

// 生成主题色
@mixin set-main-color() {
  @each $type in $types {
    $color: map.get($colors, $type, "base");
    #{createVarName(('color', $type))}: #{$color}; // --ue-color-primary
  }
}
// 生成层次色
@mixin set-main-mode-color($mode) {
  @each $type in $types {
    @for $i from 1 through 9 {
      $color: map.get($colors, $type, $mode + "-" + $i);
      #{createVarName(('color', $type, $mode, $i))}: #{$color}; // --ue-color-primary-light-1
    }
  }
}

// 生成全局的属性
@mixin set-global-var() {
  @each $key, $data in $global {
    // @debug ($key + ",,," + $data);
    @if $data {
      @each $type, $v in $data {
        #{createVarName(($key, $type))}: #{$v};
      }
    }
  }
}
// 生成私有属性
@mixin set-private-var($block, $data) {
  @each $key, $value in $data {
    #{createVarName(($block, $key))}: #{$value};
  }
}

/**
 * 定义组件的私有变量
 * @param {String} $name 组件名称
 * @param {list} $var 变量
 * @param {String} $varKey 读取组件的私有变量
 */
@mixin set-component-var($name, $var, $varKey: "default") {
  // button, buttonVars(), default
  @each $key, $val in $var {
    $varName: getVarName($name, $key); // --ue-button-border-color
    $val: map.get($var, $key, $varKey);
    // @debug $val;
    @if ($val) {
      #{$varName}: var(#{$val});
    }
  }
}

/**
 * 生成块的类名
 * @param {String} $block
 */
@mixin b($block) {
  $b: "." + $namespace + $connect + $block !global; // .ue-$block
  #{$b} {
    @content;
  }
}

/**
 * 生成修改器类名
 * @param {String} $attr
 * @param {String} $value
 */
@mixin m($attr, $value: "") {
  $modifier: $b + $modifier-connect + $attr + $modifier-value-connect + $value; // .ue-$block--$attr_$value
  // 跳出嵌套，直达根层级
  @at-root {
    #{$modifier} {
      @content;
    }
  }
}

/**
 * 创建元素的类名
 * @param {String} $ele
 */
// @mixin e($ele) {
//   $name: $b + $element-connect + $ele; // .ue-$block__$ele
//   @at-root {
//     #{$name} {
//       @content;
//     }
//   }
// }

// 生成elem
@mixin e($elem, $root: true) {
  $name: $b + $element-connect + $elem;
  @if $root {
    @at-root {
      #{$name} {
        @content;
      }
    }
  } @else {
    #{$name} {
      @content;
    }
  }
}

/**
 * 生成状态类名
 * @param {list} $attrs
 */
@mixin s($attrs, $and: true) {
  $state: "";
  @each $attr in $attrs {
    $state: if($and, "&", "") + "." + $state-prefix + $attr + "," + $state;
  } // .is-$attr,''
  #{$state} {
    @content;
  }
}

/**
 * 生成后代选择器的类名
 * @param {String} $block
 */
@mixin d($block) {
  $name: "." + $namespace + $connect + $block;
  // @debug 99 + $name;
  #{$name} {
    @content;
  }
}
