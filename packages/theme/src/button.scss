@use "./common/function.scss" as *;
@use "./common/mixins.scss" as *;
@use "./common/componentVar.scss" as *;
@use "./common/var.scss" as *;
@include b(button) {
  @include set-component-var("button", buttonVars());
}
@include b(button) {
  display: inline-flex; // 元素在一行内显示并具有弹性布局特性
  background-color: var(#{getVarName("button", "bg-color")});
  height: var(#{getVarName("button", "size")});
  min-width: 80px;
  border-width: 1px;
  border-style: solid;
  border-color: var(#{getVarName("button", "border-color")});
  padding: 0 21px;
  border-radius: 4px;
  line-height: 1;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  font-size: 16px;
  color: var(#{getVarName("button", "text-color")});
  font-size: var(#{getVarName("button", "font-size")});
  // font-weight: 600;
  cursor: pointer;
  word-break: keep-all;
  user-select: none;
  outline: none;
  column-gap: 4px; // 子元素之间的空隙为4px
  transition: 0.3s;
  vertical-align: middle;
  span {
    line-height: 1;
  }
  // .ue-button__icon {
  //   font-size: 1em; // 父元素的1倍
  // }
  &:hover {
    color: var(#{getVarName("button", "hover-text-color")});
    background-color: var(#{getVarName("button", "hover-bg-color")});
    border-color: var(#{getVarName("button", "hover-border-color")});
  }
  @include s((disabled, loading)) {
    background-color: var(#{getVarName("button", "disabled-bg-color")});
    color: var(#{getVarName("button", "disabled-text-color")});
    border-color: var(#{getVarName("button", "disabled-border-color")});
    cursor: not-allowed;
  }
  @include s((round)) {
    border-radius: 100px;
  }
  @include s((subtle)) {
    color: var(#{getVarName("button", "subtle-text-color")});
    background-color: var(#{getVarName("button", "subtle-bg-color")});
    border-color: var(#{getVarName("button", "subtle-border-color")});
    &:hover {
      background-color: var(
        #{getVarName("button", "hover-is-subtle-bg-color")}
      );
      border-color: var(#{getVarName("button", "hover-is-subtle-bg-color")});
      color: var(#{getVarName("button", "hover-is-subtle-text-color")});
    }
    @include s((disabled, loading)) {
      background-color: var(#{getVarName("button", "disabled-bg-color")});
      color: var(#{getVarName("button", "disabled-text-color")});
      border-color: var(#{getVarName("button", "disabled-border-color")});
    }
  }
  @include s((outline)) {
    color: var(#{getVarName("button", "subtle-text-color")});
    background-color: var(#{getVarName("button", "subtle-bg-color")});
    border-color: var(#{getVarName("button", "border-color")});
    &:hover {
      color: var(#{getVarName("button", "hover-is-subtle-text-color")});
      background-color: var(
        #{getVarName("button", "hover-is-outline-bg-color")}
      );
      border-color: vat(
        #{getVarName("button", "hover-is-outline-border-color")}
      );
    }
  }
  @include s((dashed)) {
    border-style: dashed;
    background-color: var(#{getVarName("button", "dashed-bg-color")});
    color: var(#{getVarName("button", "subtle-text-color")});
    border-color: var(#{getVarName("button", "border-color")});
    &:hover {
      color: var(#{getVarName("button", "hover-is-subtle-text-color")});
      background-color: var(
        #{getVarName("button", "hover-is-outline-bg-color")}
      );
      border-color: vat(
        #{getVarName("button", "hover-is-outline-border-color")}
      );
    }
  }
  @include s((block)) {
    width: 100%;
    display: flex;
  }
  @include m(size, sm) {
    padding: 0 18px;
    min-width: auto;
    font-size: 14px;
    height: var(#{getVarName("component-size", "sm")});
    // 为了给circle样式复用
    #{getVarName('button', 'font-size')}: var(#{getVarName("font-size", "sm")});
    #{getVarName('button', 'component-size')}: var(
      #{getVarName("component-size", "sm")}
    );
  }
  //  @include m(size, md) {
  //   padding: 0 22px;
  //   min-width: auto;
  //   font-size: 16px;
  //   height: var(#{getVarName("component-size", "md")});
  //   // 为了给circle样式复用
  //   #{getVarName('button', 'font-size')}: var(#{getVarName("font-size", "md")});
  //   #{getVarName('button', 'component-size')}: var(
  //     #{getVarName("component-size", "md")}
  //   );
  // }
  @include m(size, lg) {
    padding: 0 26px;
    min-width: auto;
    font-size: 18px;
    height: var(#{getVarName("component-size", "lg")});
    #{getVarName('button', 'font-size')}: var(#{getVarName("font-size", "lg")});
    #{getVarName('button', 'component-size')}: var(
      #{getVarName("component-size", "lg")}
    );
  }
  @include m(size, xl) {
    padding: 0 32px;
    min-width: auto;
    font-size: 20px;
    height: var(#{getVarName("component-size", "xl")});
    #{getVarName('button', 'font-size')}: var(#{getVarName("font-size", "xl")});
    #{getVarName('button', 'component-size')}: var(
      #{getVarName("component-size", "xl")}
    );
  }
  @include s((link)) {
    border: none;
    background-color: var(#{getVarName("button", "subtle-bg-color")});
    color: var(#{getVarName("button", "subtle-text-color")});
    &:hover {
      background-color: var(#{getVarName("button", "subtle-bg-color")});
      color: var(#{getVarName("button", "hover-is-link-text-color")});
    }
    @include s((disabled, loading)) {
      color: var(#{getVarName("button", "disabled-text-color")});
    }
  }
  @include s((circle)) {
    border-radius: 100px;
    padding: 0;
    min-width: var(#{getVarName("button", "component-size")});
    height: var(#{getVarName("button", "component-size")});
    span {
      display: none;
    }
  }
}
@each $type in $types {
  $className: ".ue-button--" + $type;
  #{$className} {
    @include set-component-var("button", buttonVars($type), "type");
  }
}
